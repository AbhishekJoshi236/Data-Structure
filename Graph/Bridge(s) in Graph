#include<bits/stdc++.h>
using namespace std;

void dfs(int node, int parent,vector<bool> &vis, vector<int> adj[], vector<pair<int,int>> &bridge,
    vector<int> &dis, vector<int> &low, int timer){
    
    vis[node]=1;
    dis[node] = low[node] = timer;
    timer++;

    for(auto x: adj[node]){
        if(parent == x)     continue;

        if(!vis[x]){
            dfs(x,node,vis,adj,bridge,dis,low,timer);
            low[node] = min(low[node], low[x]);

            if(dis[node] < low[x]){
                bridge.push_back({node,x});
            }
        }
        else{
            low[node] = min(low[node], low[x]);
        }
    }
}
int main(){

    int v,e;
    cout<<"V & E: ";
    cin>>v>>e;

    vector<int> adj[v];
    vector<bool> vis(v,0);
    vector<int> dis(v,0);
    vector<int> low(v,0);
    vector<pair<int,int>> bridge;
    int timer=1;

    cout<<"Egdes: ";
    for(int i=0;i<e;i++){
        int u,ve;
        cin>>u>>ve;
        adj[u].push_back(ve);
        adj[ve].push_back(u);
    }

    dfs(0,-1,vis,adj,bridge,dis,low,timer);

    cout<<"\nBridges in Graph:\n";
    for(auto x: bridge){
        cout<<x.first<<" "<<x.second<<endl;
    }

    return 0;
}
