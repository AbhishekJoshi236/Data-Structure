bool cmp (vector<int> &a, vector<int> &b)
{
    return a[2]<b[2];
}

void makeSet(vector<int> &parent, vector<int> &rank, int n)
{
    for(int i=0;i<n;i++)
    {
        parent[i]=i;
        rank[i]=0;
    }
}

int findParent(int node, vector<int> &parent)
{
    if(parent[node]==node)
        return node;
    
    return parent[node]=findParent(parent[node],parent);        //PATH COMPRESSION
}

void unionSet(int u,int v,vector<int> &parent,vector<int> &rank)
{
    //FINDING PARENT OF U AND V
    u = findParent(u,parent);
    v = findParent(v,parent);
    
    //CHECKING RANK OF U AND V
    if(rank[u] < rank[v]){
        parent[u] = v;
    }
    else if(rank[u] > rank[v]){
        parent[v] = u;
    }
    else{
        parent[u] = v;
        rank[v]++;
    }      
}

int minimumSpanningTree(vector<vector<int>>& edges, int n)
{
    //SORTING EDGES ON THE BASIS OF WEIGHT USING COMPARATOR
    sort(edges.begin(),edges.end(),cmp);
    
    vector<int> parent(n);
    vector<int> rank(n);
    
    //INITALISING EACH NODE WITH ITS PARENT [ITSELF]
    makeSet(parent,rank,n);
    
    int sum=0;
    
    for(int i=0;i<edges.size();i++)
    {
        int u = findParent(edges[i][0],parent);
        int v = findParent(edges[i][1],parent);
        int w = edges[i][2];
        
        //IF PARENT ARE NOT EQUAL(does not belong to same component) THEN WE MAKE A UNION B/W THEM.
        if(u!=v)
        {
            sum+=w;
            unionSet(u,v,parent,rank);
        }
    }
    return sum; 
     
}
