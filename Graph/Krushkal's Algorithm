#include<bits/stdc++.h>
using namespace std;
void Initilize(vector<int> &parent,vector<int> &rank, int n){
    for(int i=0;i<n;i++){
        parent[i]=i;
        rank[i]=0;
    }
}

int findParent(vector<int> &parent,int node){
    if(parent[node] == node){
        return node;
    }

    return parent[node] = findParent(parent,parent[node]);
}

void unionSet(int u, int v, vector<int> &parent,vector<int> &rank){

    u = findParent(parent,u);
    v = findParent(parent,v);

    if(rank[u] < rank[v]){
        parent[u] = v;
    }
    else if(rank[u] > rank[v]){
        parent[v] = u;
    }
    else{
        parent[v] = u ; 
        rank[u]++;
    }
}

bool cmp(vector<int> &a, vector<int> &b){
    return a[2] < b[2];
}
int main(){

    int v,e;
    cout<<"V & E: ";
    cin>>v>>e;

    vector<vector<int>> edges;
    vector<int> parent(v);
    vector<int> rank(v);

    
    cout<<"u,v & w: \n";
    for(int i=0;i<e;i++){
        int u,ve,w;
        cin>>u>>ve>>w;

        vector<int> temp;
        temp.push_back(u);
        temp.push_back(ve);
        temp.push_back(w);
        edges.push_back(temp);
    }

    Initilize(parent,rank,v);

    //sorting edges on the basis of their weights.
    sort(edges.begin(), edges.end(), cmp);


    cout<<"\nAnswer:\nEdges\tWeight";
    for(int i=0;i<e;i++){
        int u = findParent(parent,edges[i][0]);
        int v = findParent(parent,edges[i][1]);
        int wt = edges[i][2];

        if( u != v){
            unionSet(u,v,parent,rank);
            cout<<"\n["<<edges[i][0]<<","<<edges[i][1]<<"]\t"<<wt;
            
        }
    }
    return 0;
}
