#include<bits/stdc++.h>
using namespace std;

class DisjointSet{
    vector<int> rank,parent,size;

public:
    DisjointSet(int n){
        rank.resize(n+1,0);     //for both 0 and 1 indexing
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<n;i++){
            parent[i]=i;
            size[i]=1;
        }
    }

    int findUltimateParent(int node){
        if(parent[node] == node)
            return node;
        return parent[node] = findUltimateParent(parent[node]);
    }

    void unionByRank(int u, int v){
        int up_u = findUltimateParent(u);
        int up_v = findUltimateParent(v);

        if(up_u == up_v)    return;
        if(rank[up_u] < rank[up_v]){
            parent[up_u] = up_v;
        }
        else if(rank[up_u] > rank[up_v]){
            parent[up_v] = up_u;
        }
        else{
            parent[up_v] = up_u;
            rank[up_u]++;
        }
    }

    void unionBySize(int u, int v){
        int up_u = findUltimateParent(u);
        int up_v = findUltimateParent(v);

        if(up_u == up_v)    return;
        if(size[up_u] < size[up_v]){
            parent[up_u] = up_v;
            size[up_v] += size[up_u];
        }
        else{
            parent[up_v] = up_u;
            size[up_u] += size[up_v];
        }
    }

};

int main(){

    DisjointSet ds(7);
    ds.unionBySize(1,2);
    ds.unionBySize(2,3);
    ds.unionBySize(1,2);
    ds.unionBySize(6,7);
    ds.unionBySize(5,6);

    if(ds.findUltimateParent(3) == ds.findUltimateParent(7)){
        cout<<"SAME\n";
    }
    else{
        cout<<"NOT SAME\n";
    }

    ds.unionBySize(3,7);

    if(ds.findUltimateParent(3) == ds.findUltimateParent(7)){
        cout<<"same\n";
    }
    else{
        cout<<"NOT SAME\n";
    }

    return 0;
}
