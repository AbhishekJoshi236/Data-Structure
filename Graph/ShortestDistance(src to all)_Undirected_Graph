vector<int> shortestPath(int n, vector<vector<int>>&edges, int src) {
    
    unordered_map<int,vector<int>> adj;
    vector<int> dist(n,INT_MAX);

    for(auto x: edges){
        adj[x[0]].push_back(x[1]);        
        adj[x[1]].push_back(x[0]);
    }

    queue<int> q;
    q.push(src);
    dist[src]=0;

    while(!q.empty()){

        int front = q.front();
        q.pop();

        for(auto x: adj[front]){
            
            if(dist[front]+1 < dist[x]){
                dist[x] = dist[front]+1;
                q.push(x);
            }
        }
    }

    for(int i=0;i<n;i++){
        if(dist[i]==INT_MAX)
            dist[i] = -1;
    }
    return dist;
}
