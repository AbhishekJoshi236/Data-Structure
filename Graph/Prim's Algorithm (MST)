#include<bits/stdc++.h>
using namespace std;

void primsAlgo(int node, unordered_map<int,vector<pair<int,int>>> &adj, 
vector<int> &key, vector<bool> mst,vector<int> &parent){

    int n = mst.size();

    key[node]=0;
    parent[node]=-1;

    for(int i=0;i<n;i++){
        int mini=INT_MAX;
        int u;

        for(int j=0;j<n;j++){
            if(mst[j]==false && key[j]<mini){
                u=j;
                mini=key[j];
            }
        }

        mst[u]=1;

        for(auto x: adj[u]){
            int v = x.first;
            int w = x.second;
            if(mst[v] ==false && w < key[v]){
                parent[v] = u;
                key[v] = w;
            }
        }
        
    }

    //Answer lies in parent array.
    
    //printing O/P
    cout<<"Edges "<<"\t"<<"Weight\n";
    for(int i=1;i<n;i++){
        cout<<"["<<i<<","<<parent[i]<<"]\t"<<key[i]<<"\n";
    }
    cout<<endl;

}
int main(){

    int v,e;
    cout<<"V and E: ";
    cin>>v>>e;
    
    unordered_map<int,vector<pair<int,int>>> adj;
    vector<int> key(v,INT_MAX);
    vector<bool> mst(v,0);
    vector<int> parent(v,-1);

    cout<<"u,v & w: ";
    for(int i=0;i<e;i++){
        int u,ve,w;
        cin>>u>>ve>>w;
        adj[u].push_back({ve,w});
        adj[ve].push_back({u,w});
    }

    int src=0;
    key[src]=0;

    primsAlgo(src,adj,key,mst,parent);
    
    return 0;
}
