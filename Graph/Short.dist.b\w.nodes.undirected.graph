vector<int> shortestPath( vector<pair<int,int>> edges , int n , int m, int s , int t){
	
	// Write your code here
    unordered_map<int,list<int>> adj;
    for(int i=0;i<edges.size();i++)
    {
        int u=edges[i].first;
        int v=edges[i].second;
        
        adj[u].push_back(v);
        adj[v].push_back(u);
    }
    
    unordered_map<int,bool> visited;
    unordered_map<int,int> parent;
    vector<int> v;
    queue<int> q;
	
    visited[s]=1;
    q.push(s);
    parent[s]=-1;
    
    while(!q.empty())
    {
        int front = q.front();
        q.pop();
        
        for(auto neigh: adj[front])
        {
            if(!visited[neigh])
            {
                visited[neigh]=1;
                parent[neigh]=front;
                q.push(neigh);
            }
        }
    }
    
    v.push_back(t);
    while(t!=s)
    {
        t=parent[t];
        v.push_back(t);
    }
    reverse(v.begin(),v.end());
    
    return v;
}
