-> CODESTUDIO
-> This algorithm is use to find the shortest path b/w sourse and destination node.
-> As Dijkstra Algorithm fails for -ve weighted edges therefore bellman ford algorithm is used.
-> Algorithm: 
  1. Apply  if(dist[u] + w < dist[v]) { dist[v] = dist[u] + w;  }  n-1 times on all edges.
  2. At last this same formula one more time to check whether the -ve cycle is present or not. If distance of any node gets updated then -ve cycle is present and we 
     can't find the shortest path, but if no updation in their in distance of any node then we can find the shortest path.


int bellmonFord(int n, int m, int src, int dest, vector<vector<int>> &edges) {
    // Write your code here.
    
    vector<int> dist(n+1,1e9);
    dist[src]=0;
    
    //checking all edges with the formula for n-1 times.
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<m;j++)
        {
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];
            
            if(dist[u]!=1e9 && (dist[u] + w < dist[v]))
            {
                dist[v] = dist[u] + w;
            }
        }
    }
    
    //checking one more times all edges at last. 
    int flag=0;
    for(int j=0;j<m;j++)
        {
            int u = edges[j][0];
            int v = edges[j][1];
            int w = edges[j][2];
            
            if(dist[u]!=1e9 && (dist[u] + w < dist[v]))
            {
                dist[v] = dist[u] + w;
                flag=1;
            }
        }
    
    if(flag==0)
        return dist[dest];
    else
        return -1;
}
