#include<bits/stdc++.h>
using namespace std;

class graph{

public:
    void print(unordered_map<int, vector< pair<int,int> > > adj, int n){
        
        for(auto x: adj){
            cout<<x.first<<"->";
            for(auto y: x.second){
                cout<<"["<<y.first<<","<<y.second<<"]";
            }
            cout<<endl;
        }
    }

    void topologicalsort(int node,stack<int> &st,vector<bool> &vis,unordered_map<int,vector<pair<int,int>>> &adj){

        vis[node]=1;

        for(auto x: adj[node]){
            if(!vis[x.first]){
                topologicalsort(x.first,st,vis,adj);            
            }
        }

        st.push(node);
    }

    void getShortestPath(int src, vector<int> &distance, unordered_map<int, vector<pair<int,int>> > &adj,stack<int> &st){
        distance[src]=0;

        while(!st.empty()){
            int top = st.top();
            st.pop();

            if(distance[top] != INT_MAX){
                for(auto x: adj[top]){
                    if(distance[top] + x.second < distance[x.first]){
                        distance[x.first] = distance[top] + x.second;
                    }
                }
            }
        }
    }

};
int main(){

    graph g;

    int v,e;
    cout<<"V & E: ";
    cin>>v>>e;
    
    unordered_map<int, vector<pair<int,int>> > adj; 
    cout<<"V,U and W: ";
    for(int i=0;i<e;i++){
        int u,ve,w;
        cin>>u>>ve>>w;

        adj[u].push_back(make_pair(ve,w));
    }

    // g.print(adj,v);

    //step 1: find topological sequence;
    stack<int> st;
    vector<bool> vis(v,0);

    for(int i=0;i<v;i++){
        if(!vis[i])
            g.topologicalsort(i,st,vis,adj);
    }
    

    //step 2 set distance of src =0 ;
    int src=1;
    vector<int> distance(v,INT_MAX);


    //step 3: Update the distance
    g.getShortestPath(src,distance,adj,st);
    

    cout<<"Answer is: ";
    for(int i=0;i<v;i++){
        cout<<distance[i]<<" ";
    }


    return 0;
}
// 0 1 5 0 2 3 1 2 2 1 3 6 2 3 7 2 4 4 2 5 2 3 4 -1 4 5 -2
